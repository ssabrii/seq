
.. _program_listing_file_compiler_include_seq_array.h:

Program Listing for File array.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_compiler_include_seq_array.h>` (``compiler/include/seq/array.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef SEQ_ARRAY_H
   #define SEQ_ARRAY_H
   
   #include "types.h"
   
   namespace seq {
   namespace types {
   class ArrayType : public Type {
   private:
     Type *baseType;
     explicit ArrayType(Type *baseType);
   
   public:
     ArrayType(ArrayType const &) = delete;
     void operator=(ArrayType const &) = delete;
   
     llvm::Value *defaultValue(llvm::BasicBlock *block) override;
   
     void initOps() override;
     void initFields() override;
     bool isAtomic() const override;
     bool is(Type *type) const override;
     unsigned numBaseTypes() const override;
     Type *getBaseType(unsigned idx) const override;
     llvm::Type *getLLVMType(llvm::LLVMContext &context) const override;
     size_t size(llvm::Module *module) const override;
     llvm::Value *make(llvm::Value *ptr, llvm::Value *len,
                       llvm::BasicBlock *block);
     static ArrayType *get(Type *baseType) noexcept;
     static ArrayType *get() noexcept;
   
     ArrayType *clone(Generic *ref) override;
   };
   
   } // namespace types
   } // namespace seq
   
   #endif /* SEQ_ARRAY_H */
